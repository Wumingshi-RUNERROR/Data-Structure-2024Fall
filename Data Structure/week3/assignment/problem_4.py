def solver(maze):
    # Please write your code here
    answer=[]
    n=len(maze)
    m=len(maze[0])

    def dfs(x,y):
        if answer and answer[-1]==(n-1,m-1):
            return
        
        answer.append((x,y))
        maze[x][y]=0
        if x+1<n and maze[x+1][y]==1:
            dfs(x+1,y)
        if y+1<m and maze[x][y+1]==1:
            dfs(x,y+1)
        if y-1>=0 and maze[x][y-1]==1:
            dfs(x,y-1)
        if x-1>=0 and maze[x-1][y]==1:
            dfs(x-1,y)

        if answer[-1]!=(n-1,m-1):
            answer.pop()
        
    dfs(0,0)
    return answer



def main():
    res = solver([[1, 0, 1, 1, 1],
                  [1, 0, 1, 0, 1],
                  [1, 0, 1, 0, 1],
                  [1, 1, 1, 0, 1]])

    print(res)  # Should print
    # [(0, 0), (1, 0), (2, 0), (3, 0), (3, 1), (3, 2), (2, 2), (1, 2), (0, 2), (0, 3), (0, 4), (1, 4), (2, 4), (3, 4)]

    res = solver([[1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                  [0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1],
                  [1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1],
                  [1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1],
                  [1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1],
                  [1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1],
                  [1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1],
                  [1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1],
                  [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1],
                  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])

    print(res)  # Should print
    # [(0, 0), (0, 1), (0, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (5, 3), (5, 4), (4, 4), (3, 4), (2, 4), (1, 4),
    # (0, 4), (0, 5), (0, 6), (0, 7), (1, 7), (2, 7), (3, 7), (4, 7), (4, 8), (4, 9), (4, 10), (3, 10), (2, 10),
    # (2, 11), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (9, 13), (9, 14)]


if __name__ == '__main__':
    main()
